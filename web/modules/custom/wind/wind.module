<?php

/**
 * @file
 * Contains wind.module
 */

use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\user\Entity\User;

/**
 * Note: Any Redirect here will cause issue with Reset Password Login process
 * Implements hook_user_login().
 *
 * @param $account
 */
function wind_user_login($account) {
  // In case of login is being called thru API or CURL
  if(isset($_GET['_format']) && $_GET['_format'] == 'json' ){
    return;
  }
  // Code below cause user to unable to login after update Drupal core to 9.2.3
//  $response = new RedirectResponse('/dashboard');
//  $response->send();
  // Temporary fix for unable to login. @see https://www.drupal.org/project/drupal/issues/2852657#comment-14151263
//  \Drupal::service('request_stack')->getCurrentRequest()->query->set('destination', '/dashboard');
}

/**
 * Implements hook_theme().
 */
function wind_theme($existing, $type, $theme, $path) {
  $site_name = \Drupal::config('system.site')->get('name');
  $site_link = isset($_SERVER['HTTP_ORIGIN']) ?  $_SERVER['HTTP_ORIGIN'] : $_SERVER['REQUEST_SCHEME'] . '://' . $_SERVER['HTTP_HOST'] ;
  return [
    'wind_email' => [
      'variables' => [
        'body' => '',
        'site_name' => $site_name,
        'site_link' => $site_link,
      ],
    ],
  ];
}

/**
 * Make all mail use wind_theme: wind_email template.
 *
 * Implements hook_mail_alter().
 */
function wind_mail_alter(&$message) {
  \Drupal::config('system.site')
    ->get('name');
  $renderable = [
    '#theme' => 'wind_email',
    '#body' => $message['body'][0],
  ];
  $rendered = \Drupal::service('renderer')->renderPlain($renderable);
  // Todo: add notifications_optin feature for user whom want to unsubscribe to email notification.

//    if (!example_notifications_optin($message['to'], $message['id'])) {
//
//      // If the recipient has opted to not receive such messages, cancel
//      // sending.
//      $message['send'] = FALSE;
//      return;
//    }
  // Allows rich HTML email
  $message['headers']['Content-Type'] = 'text/html; charset=UTF-8';
  $message['body'] = [$rendered];
}

/**
 * Implements hook_form_alter().
 *
 * Applies access condidtion to fields for certain user roles.
 */
function wind_form_alter(&$form, \Drupal\Core\Form\FormStateInterface &$form_state, $form_id) {
  // If current user is on /user/[uid]/edit page
  if ($form_id == 'user_form') {
    $current_user = _wind_get_current_login_user();
    $haystack = $current_user->getRoles();
    // Disable form if user do NOT have the right role/s.
    if(count(array_intersect($haystack, ['admin', 'administrator'])) == 0){

      if($_SERVER['REQUEST_URI'] == '/user/1/edit'){
        $form['#access'] = false;
        $form['#markup'] = 'You do not have elevated access';
      }

      $uriExploded = explode('/', $_SERVER['REQUEST_URI']);
      if (is_numeric($uriExploded[2])) {
        $formUser = User::load($uriExploded[2]);
        $formUserRoles = $formUser->getRoles();

        // If the current user editing someone with admin role; but they-themselve don't have admin role,
        // don't let current user edit the form.
        if(count(array_intersect($formUserRoles, ['admin', 'administrator'])) != 0){
          $form['#access'] = false;
          $form['#markup'] = 'You do not have elevated access';
        }
      }
    }
  }
}

function _wind_get_greeting_time() {
  $Hour = date('G');
  if ( $Hour >= 5 && $Hour <= 11 ) {
    return "Good Morning";
  } else if ( $Hour >= 12 && $Hour <= 18 ) {
    return "Good Afternoon";
  } else if ( $Hour >= 19 || $Hour <= 4 ) {
    return "Good Evening";
  }
}

function wind_does_user_has_sudo($user) {
  if ($user->id() == 1) {
    return true;
  }

  $userRoles = $user->getRoles();
  if (in_array('administrator', $userRoles)) {
    return true;
  }

  if ($user->hasPermission('administer group') || $user->hasPermission('administer site configuration')) {
    return true;
  }

  return false;
}

/**
 * Compare 2 arrays.
 * When node field (multi value) was edited,
 * use this to find out what was removed and what was added
 * @param $array_new
 * @param $array_origin
 *
 * @return array
 */
function _wind_array_compare($array_new, $array_origin) {
  return [
    'added' => array_diff($array_new, $array_origin),
    'removed' => array_diff($array_origin, $array_new)
  ];
}

/**
 * Get HTML <a /> blue rouned corner button for emailing
 * @param $label
 * @param string $link
 */
function _wind_gen_button_for_email($label, $link) {
  $markup =  '<a class=" btn " style="align-items:baseline; box-sizing:border-box; border-radius:3px; border-width:0; display:inline-flex; font-style:normal; font-size:inherit; width:auto; height:3em; line-height:2.28571429em; margin:0; outline:none; padding:8px 10px; text-align:center; vertical-align:middle; white-space:nowrap; text-decoration:none; border:none; background:#007bff; color:#fff" href="'. $link .'">';
  $markup .=  $label;
  $markup .=  '</a>';
  return $markup;
}

/**
 * @param $vid
 * @param $parentTid
 * @param mixed | int $depth // To get only immediate children, NULL to load entire tree
 *
 * @see https://drupal.stackexchange.com/a/258936
 *
 * @return mixed
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function _wind_get_term_children($vid, $parentTid, $depth = NULL) {
  $load_entities = TRUE; // True will return loaded entities rather than ids
  $childTerms= \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree($vid, $parentTid, $depth, $load_entities);
  return array_map (function($term){
    return [
      'tid' => $term->id(),
      'label' => $term->label(),
      'vid' => $term->get('vid')->getString(),
    ];
  }, $childTerms);
}

function _wind_get_term_ancestors($tid) {
  $ancestors = \Drupal::service('entity_type.manager')->getStorage("taxonomy_term")->loadAllParents($tid);
  $list = [];
  foreach ($ancestors as $term) {
    if ($term->id() == $tid) {
      continue;
    }

    $list[] = [
      'tid' => $term->id(),
      'label' => $term->label()
    ];
  }
  // list is from current to ancestors,
  // we flip it so we get oldest to latest.
  return array_reverse($list);
}

/**
 * Utility: find term by name and vid.
 * @param null $name
 *  Term name
 * @param null $vid
 *  Term vid
 * @return int
 *  Term id or 0 if none.
 * @see https://drupal.stackexchange.com/a/225211
 */
function wind_get_tid_by_name($name = NULL, $vid = NULL) {
  $properties = [];
  if (!empty($name)) {
    $properties['name'] = $name;
  }
  if (!empty($vid)) {
    $properties['vid'] = $vid;
  }
  $terms = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties($properties);
  $term = reset($terms);

  return !empty($term) ? $term : 0;
}

/**
 * @return \Drupal\Core\Entity\EntityBase|\Drupal\Core\Entity\EntityInterface|\Drupal\user\Entity\User|null
 */
function _wind_get_current_login_user() {
  $uid = \Drupal::currentUser()->id();
  return \Drupal\user\Entity\User::load($uid);
}

/**
 * Get first child value of an array.
 *  Have to write it out to avoid: Notice: Only variables should be passed by reference
 * @param $arr
 *
 * @return mixed
 */
function _wind_array_first_child_value($arr) {
  $reverse = array_reverse($arr);
  return array_pop($reverse);
}
