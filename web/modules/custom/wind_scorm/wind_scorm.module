<?php

use Drupal\Core\Link;
use Drupal\Core\Render\Markup;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;

/**
 * Implements hook_ENTITY_TYPE_insert() for node entities.
 *
 * This tests saving a node on node insert.
 *
 * @see \Drupal\node\Tests\NodeSaveTest::testNodeSaveOnInsert()
 */
function wind_scorm_node_insert(NodeInterface $node) {
  // Set the node title to the node ID and save.
  if ($node->getType() != 'course') {
    return;
  }
  $field_package_file = $node->get('field_package_file')->getValue();
  if(empty($field_package_file)){
    return;
  }

  $fids = array_map(function($value){
    return $value['target_id'];
  }, $field_package_file);

  $files = \Drupal::entityTypeManager()->getStorage('file')->loadMultiple($fids);

  /* @var \Drupal\opigno_scorm\OpignoScorm $scorm_controller */
  $scorm_controller = \Drupal::service('opigno_scorm.scorm');

  foreach ($files as $file){
    // Create SCORM package from file.
    $result = $scorm_controller->scormExtract($file);
  }
}

function wind_scorm_node_update(NodeInterface $node) {
  // Set the node title to the node ID and save.
  if ($node->getType() != 'course') {
    return;
  }
  $field_package_file = $node->get('field_package_file')->getValue();
  if(empty($field_package_file)){
    return;
  }

  $fids = array_map(function($value){
    return $value['target_id'];
  }, $field_package_file);

  $files = \Drupal::entityTypeManager()->getStorage('file')->loadMultiple($fids);

  /* @var \Drupal\opigno_scorm\OpignoScorm $scorm_controller */
  $scorm_controller = \Drupal::service('opigno_scorm.scorm');

  foreach ($files as $file){
    $scorm = $scorm_controller->scormLoadByFileEntity($file);
    // If this scorm already extracted, skip it.
    if ($scorm) {
      continue;
    }

    // Create SCORM package from file.
    $result = $scorm_controller->scormExtract($file);
  }
}

/**
 * Implements hook_opigno_scorm_commit().
 * @see opigno_scorm.module::opigno_scorm_opigno_scorm_commit()
 * @see Drupal\opigno_scorm\Controller\OpignoScormController::scormCommit
 */
//function wind_scorm_opigno_scorm_commit($scorm, $sco_id, $data) {
//  $account = Drupal::currentUser();
//}

function wind_scorm_getTestSCO() {
  $sco = new \stdClass();
  $sco->id = "1";
  $sco->scorm_id = "1";
  $sco->organization = "DOI";
  $sco->identifier = "item_1";
  $sco->parent_identifier = "DOI";
  $sco->launch = "app_assets/index.html";
  $sco->type = "webcontent";
  $sco->scorm_type = "sco";
  $sco->title = "Course Introduction";
  $sco->weight = "0";
  $sco->attributes = array(
    'control_mode_choice' => '1',
    'control_mode_flow' => '0',
    'control_mode_choice_exit' => '1',
    'control_mode_forward_only' => '0',
    'objectives' => [
      array(
        'primary' => TRUE,
        'secondary' => FALSE,
        'id' => 'PRIMARYOBJ',
        'satisfied_by_measure' => FALSE,
        'min_normalized_measure' => '.08',
      ),
      array(
        'primary' => FALSE,
        'secondary' => TRUE,
        'id' => 'm01',
      )
    ]
  );
  return $sco;
}

function wind_scorm_getTestScorm(){
  $scorm = new \stdClass();
  $scorm->id = '1';
  $scorm->fid = '1';
  $scorm->extracted_dir = 'public://opigno_scorm_extracted/scorm_42';
  $scorm->manifest_file = 'public://opigno_scorm_extracted/scorm_42/imsmanifest.xml';
  $scorm->manifest_id = 'com.scorm.windwalker.runtime.minimumcalls.20043rd';
  $scorm->metadata = 'a:2:{s:6:"schema";s:9:"ADL SCORM";s:13:"schemaversion";s:16:"2004 3rd Edition";}';

  return $scorm;
}

function wind_scorm_getSCOTestPath(){
  $module_handler = \Drupal::service('module_handler');
  $module_path = $module_handler->getModule('wind_scorm')->getPath();
  //    return $GLOBALS['base_url'] .  '/' . $module_path . '/courses/test-1/app_assets/index.html';
  return $GLOBALS['base_url'] .  '/' . $module_path . '/courses/RuntimeBasicCalls_SCORM20043rdEdition/shared/launchpage.html';
}

function wind_scorm_get_lanuch_link_renable_array($scorm_id) {
  $label = 'test';
  $url = Url::fromRoute(
    'wind_scorm.scorm_launcher',
    array('id' => $scorm_id),
    array(
      'query' => ['dest' =>  \Drupal::service('path.current')->getPath()],
      'attributes' => array(
        'class' => 'wind-scorm-popup-link',
        'data-coure-href' => '/scorm-course/' . $scorm_id . '/take',
      )
    )
  );
  $linkContent = '<i class="fas fa-external-link-alt align-self-center pr-1"></i> ' . $label;
  $renderedAnchorContent = render($linkContent);
  return  [
    '#markup' => Link::fromTextAndUrl(Markup::create($renderedAnchorContent), $url)->toString(),
    '#attached' => array(
      'library' => array(
        'wind_scorm/course_popup'
      ),
    )
  ];
}

function wind_scorm_get_player_rendable_array_by_scorm_id($id) {
  $result = \Drupal::database()->select('opigno_scorm_packages', 'o')
    ->fields('o', [])
    ->condition('id', $id)
    ->execute()
    ->fetchAll();

  if(!$result){
    return FALSE;
  }

  $scorm = $result[0];
  /** @var \Drupal\opigno_scorm\OpignoScormPlayer $scorm_player */
  $scorm_player = \Drupal::service('opigno_scorm.scorm_player');
  return $scorm_player->toRendarableArray($scorm);
}
