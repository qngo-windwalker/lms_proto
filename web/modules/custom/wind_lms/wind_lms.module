<?php

use Drupal\Component\Utility\UrlHelper;
use Drupal\opigno_module\Entity\OpignoModule;
use Drupal\Core\Controller\ControllerBase;
use Drupal\group\Entity\Group;
use Drupal\opigno_group_manager\OpignoGroupContext;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\opigno_group_manager\Entity\OpignoGroupManagedContent;
use Drupal\opigno_module\Entity\OpignoActivity;
use Drupal\opigno_group_manager\OpignoGroupContentTypesManager;
use Drupal\Component\Serialization\Json;

//include_once('./inc/wind_lms.tincan.inc');
module_load_include('inc', 'wind_lms', 'inc/wind_lms.tincan');

/**
 * Implements hook_theme().
 * @param $exiting
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function wind_lms_theme($existing, $type, $theme, $path){
  return array(
    'wind_lms_dashboard' => array(
      'variables' => array('content' => NULL),
      'template' => 'wind-lms-dashboard'
    )
  );
}

function wind_lms_create_group_learning_path($title) {
  $group = \Drupal\group\Entity\Group::create([
      'type' => 'learning_path',
      'label' => $title,
    ]
  );
  $group->enforceIsNew();
  $group->save();

  return $group;
}

function wind_lms_get_all_user_in_group($gid) {
  $users  = array();
  $result = \Drupal::entityQuery('group_content')
    ->condition('gid', $gid)
    ->execute();

  if ($result) {
    $relations = \Drupal\group\Entity\GroupContent::loadMultiple($result);
    foreach ($relations as $relation) {
      $entity = $relation->getEntity();
      if ($entity->getEntityTypeId() == 'user') {
        $users[$entity->id()] = $entity;
      }
    }
  }
  return $users;
}

/**
 * Get all of the groups the user belongs to.
 */
function wind_lms_get_all_user_groups($user) {
  $groups = array();
  $group_membership_service = \Drupal::service('group.membership_loader');
  $groupServices = $group_membership_service->loadByUser($user);
  foreach($groupServices as $groupService){
    $group = $groupService->getGroup();
    $groups[$group->id()] = $group;
  }
  return $groups;
}

function wind_lms_add_user_to_group($uid, $gid) {
  $account = \Drupal\user\Entity\User::load($uid);
  $group = \Drupal\group\Entity\Group::load($gid);
  $group->addContent($account, 'group_membership', array());
}

function wind_lms_create_module($name) {
  $entity = OpignoModule::create(array(
    'name' => $name,
    'status' => true,
  ));
  $entity->save();

  return $entity;
}

function wind_lms_createScormActivity($name, $fid){
  // Create activity.
  $activity = \Drupal\opigno_module\Entity\OpignoActivity::create([
    'type' => 'opigno_scorm',
    'name' => $name,
    'opigno_scorm_package' => [
      'target_id' => $fid,
    ],
  ]);

  $activity->save();
  return $activity;
}

/**
 * @param $filepath
 * @return \Drupal\Core\Entity\EntityInterface|\Drupal\file\Entity\File|\Drupal\file\FileInterface|false|null|void
 */
function wind_lms_setFileRecord($filepath){
  $parsed_url = UrlHelper::parse($filepath);
  $filepath = $parsed_url['path'];
  $contents = file_get_contents($filepath);
  $file_name = drupal_basename($filepath);
  // Prepare folder.
  $public_external_package_dir = 'public://external_packages';
  file_prepare_directory($public_external_package_dir, FILE_CREATE_DIRECTORY);
  $temporary_file_path = $public_external_package_dir . '/' . $file_name;
  /** @var \Drupal\file\FileInterface|false $file */
  $result = file_save_data($contents, $temporary_file_path);
  if (!$result) {
    return FALSE;
  }
  $file = \Drupal\file\Entity\File::load($result->id());
  return $file;
}

/**
 * @return \Drupal\group\Entity\Group[]
 */
function wind_lms_get_all_group_learning_path(){
  $collection = array();
  $groups = \Drupal\group\Entity\Group::loadMultiple();
  /**
   * Todo: Optimize - Convert to DB query.
   * @var  $gid
   * @var \Drupal\group\Entity\Group $group
   */
  foreach ($groups as $gid => $group) {
    if ($group->getGroupType()->label() == 'Learning Path') {
      $collection[$gid] = $group;
    }
  }
  return $collection;
}

function wind_lms_get_user_group_learning_paths($user) {
  $filtered_groups = [];
  $groupMembershipService = \Drupal::service('group.membership_loader');
  $groups = $groupMembershipService->loadByUser($user);
  /** @var \Drupal\group\GroupMembership $groupMembership */
  foreach ($groups as $groupMembership) {
    $group = $groupMembership->getGroup();
    if($group->getGroupType()->label() == 'Learning Path'){
      $filtered_groups[$group->id()] = $group;
    }
  }
  return $filtered_groups;
}

function wind_lms_get_group_ids($options = array()) {
  $query = \Drupal::entityQuery('group');
  foreach ($options as $key => $val) {
    $query->condition($key, $val);
  }
  $result = $query->execute();

  if ($result) {
    return $result;
  } else {
    return array();
  }
}

/**
 * @param $user
 * @param Group $group
 * @return \Drupal\group\Entity\GroupRole[]
 */
function wind_lms_get_user_group_roles($user, Group $group) {
  /** @var \Drupal\group\GroupMembership $membership */
  $membership = $group->getMember($user);
  if (!$membership) {
    return [];
  }
  return $membership->getRoles();
}

/**
 * @param $currentUser
 * @param $target_user
 * @param $exclude_group_type_label
 * @return \Drupal\group\GroupMembership[]
 */
function wind_lms_current_user_and_target_user_in_groups($currentUser, $target_user, $exclude_group_type_label) {
  $currentUserGroups = wind_lms_get_all_user_groups($currentUser);
  $currentUserSameGroups = [];
  foreach ($currentUserGroups as $currentUserGroup) {
    if($currentUserGroup->getGroupType()->label() == $exclude_group_type_label){
      continue;
    }
    $targetUserMembership = $currentUserGroup->getMember($target_user);
    if($targetUserMembership){
      $currentUserSameGroups[] = $currentUserGroup;
    }
  }
  return $currentUserSameGroups;
}

/**
 * @param $user
 * Todo: Add missing courses
 * @return array
 */
function _wind_lms_course_get_all_courses_definition() {
  return [
//    "Test" => [
//      'title' => 'Test Course',
//      'folder' => 'course-tincan-hKLmLbMr',
//      'tincan_course_id' => 'http://course_2019_12_31',
//    ],
  ];
}

/**
 * Return array of course paid by the user
 * @param $user
 *
 * @return array
 */
function _wind_lms_get_user_all_assigned_course_data($user){
  $courses = array();
  $avail_courses = _wind_lms_course_get_all_courses_definition();
  // get ?test=true in the URL
  $isTestActive = \Drupal::request()->get('test');
  // Add testing courses if user has permission and parameter test is true
//  if($isTestActive == 'true' && wind_does_user_has_sudo($user)){
    $courses[] = ['title' => 'Test Course', 'folder' => 'test_course', 'tincan_course_id' => 'test_abc123'];
    $courses[] = ['title' => 'Le Rouge', 'folder' =>  'le-rouge-tincan-4SaXPWmj', 'tincan_course_id' => 'http://9qnQNtAlndQDKxBIjpu7htddOsClIEQh_rise'];
//  }

  // We have a problem if this is the case
  if (empty($courses)) {
    return [];
  }

  foreach ($courses as $index => &$course) {
    $progress = _wind_lms_course_add_tincan_course_data($user, $course['tincan_course_id']);
    $course += $progress;
  }

  return $courses;
}


/**
 * @param $course_folder
 *
 * @return string
 */
function _wind_lms_gen_course_link($course_folder) {
  $currentUser = \Drupal::currentUser();
  $schemaAndHost = _wind_lms_get_scheme_and_http_host();

  //Ex: {"name":["quan ngo"],"account":[{"accountServiceHomePage":"http://cloud.scorm.com","accountName":"0QTP625WM3|quan.ngo@windwalker.com"}],"objectType":"Agent"}
  $actor = [
    'name' => array($currentUser->getAccountName()),
    'account' => array(
      array(
        "accountName" => _wind_lms_get_user_tincan_agent_account_name($currentUser),
        'accountServiceHomePage' => $schemaAndHost . '/user/' . $currentUser->id(),
      )
    ),
    'objectType' => 'Agent'
  ];
  $actorJson = Json::encode($actor);
  $module_handler = \Drupal::service('module_handler');
  $module_path = $module_handler->getModule('wind_lms')->getPath();
  $link = $module_path . '/course/' . $course_folder . '?';
  $link .= 'endpoint=' . $schemaAndHost . '/course/tcapi';
  $link .= '&actor=' . urlencode($actorJson);
  return $link;
}
/**
 * @return string
 */
function _wind_lms_get_scheme_and_http_host(){
  // Since we're using forward HTTP to HTTPS ($_SERVER[HTTP_X_FORWARDED_PROTO] = https),
  // \Drupal::request()->getSchemeAndHttpHost() will return http://... on learn.clearinghousenavigator.com
  // We have to make sure the URL is HTTPS
  if ($_SERVER['HTTP_HOST'] == 'learn.clearinghousenavigator.com' && $_SERVER['REQUEST_SCHEME'] == 'http'){
    $schemaAndHost = 'https://learn.clearinghousenavigator.com';
  } else {
    $schemaAndHost = \Drupal::request()->getSchemeAndHttpHost();
  }
  return $schemaAndHost;
}
