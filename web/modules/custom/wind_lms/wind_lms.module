<?php

use Drupal\Component\Serialization\Json;
use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Render\Markup;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\node\NodeInterface;
use Drupal\user\Entity\User;
use Drupal\Core\Site\Settings;
use Drupal\wind_tincan\Entity\TincanStatement;

//include_once('./inc/wind_lms.tincan.inc');
module_load_include('inc', 'wind_lms', 'inc/wind_lms.db');
module_load_include('inc', 'wind_lms', 'inc/wind_lms.tincan');

/**
 * Implements hook_theme().
 * @param $exiting
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function wind_lms_theme($existing, $type, $theme, $path){
  return array(
    'wind_lms_dashboard' => array(
      'variables' => array('content' => NULL),
      'template' => 'wind-lms-dashboard'
    )
  );
}

/**
 * Implements hook_mail().
 * Copied from sendgrid_integration_mail()
 *
 * Any mail $mailManager->mail() with the key of 'wind_lms' will pass thru here.
 */
function wind_lms_mail($key, &$message, $params) {
  // Allows rich HTML email
  $message['headers']['Content-Type'] = 'text/html; charset=UTF-8';
  $message['module'] = 'wind_lms';
  $message['key'] = $key;
  $message['subject'] = $params['subject'];
  $message['body'] = explode(
    Settings::get('mail_line_endings', PHP_EOL) . Settings::get('mail_line_endings', PHP_EOL),
    $params['body']
  );
//  if ($params['include_test_attachment']) {
//    $message['attachments'][] = \Drupal::service('file_system')
//      ->realpath('core/misc/druplicon.png');
//  }
  if (isset($params['Reply-To']) && !empty($params['Reply-To'])) {
    $message['headers']['Reply-To'] = $params['Reply-To'];
  } else {
    if (isset($params['reply_to']) && !empty($params['reply_to'])) {
      $message['headers']['Reply-To'] = $params['reply_to'];
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert() for node entities.
 *
 * This tests saving a node on node insert.
 *
 * @see \Drupal\node\Tests\NodeSaveTest::testNodeSaveOnInsert()
 */
function wind_lms_node_insert(NodeInterface $node) {
  // Set the node title to the node ID and save.
  if ($node->getType() == 'course') {
    /* @var \Drupal\wind_lms\CourseNode $course_node */
    $course_node = \Drupal::service('wind_lms.course_node');
    $course_node->onNodeInsert($node);
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert() for node entities.
 */
function wind_lms_tincan_state_insert(Drupal\Core\Entity\EntityInterface $entity) {
  _wind_lms_delete_user_course_cache_by_tincan_state($entity);
}

/**
 * Implements hook_ENTITY_TYPE_insert() for node entities.
 */
function wind_lms_tincan_statement_insert(Drupal\Core\Entity\EntityInterface $entity) {
  _wind_lms_delete_user_course_cache_by_tincan_statement($entity);
}

/**
 * Implements hook_ENTITY_TYPE_update() for node entities.
 * @param \Drupal\node\NodeInterface $node
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function wind_lms_node_update(NodeInterface $node) {
  // Set the node title to the node ID and save.
  if ($node->getType() == 'course') {
    /* @var \Drupal\wind_lms\CourseNode $course_node */
    $course_node = \Drupal::service('wind_lms.course_node');
    $course_node->onNodeUpdate($node);
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 *
 * @param \Drupal\user\Entity\User $user
 */
function wind_lms_user_insert(Drupal\user\Entity\User $user) {
  /* @var \Drupal\wind_lms\UserEntity $user_entity */
  $user_entity = \Drupal::service('wind_lms.user_entity');
  $user_entity->onUserInsert($user);
}

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * @param \Drupal\user\Entity\User $user
 */
function wind_lms_user_update(Drupal\user\Entity\User $user) {
  /* @var \Drupal\wind_lms\UserEntity $user_entity */
  $user_entity = \Drupal::service('wind_lms.user_entity');
  $user_entity->onUserUpdate($user);
}

/**
 * Implements hook_entity_delete().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function wind_lms_entity_delete(Drupal\Core\Entity\EntityInterface $entity) {
  switch ($entity->getEntityType()->id()) {
    case 'tincan_state':
      _wind_lms_delete_user_course_cache_by_tincan_state($entity);
      break;

    case 'tincan_statement':
      _wind_lms_delete_user_course_cache_by_tincan_statement($entity);
      break;
  }
}

/**
 * Implements hook_form_alter().
 *
 * Applies access condidtion to fields for certain user roles.
 */
function wind_lms_form_alter(&$form, \Drupal\Core\Form\FormStateInterface &$form_state, $form_id) {
  // If current user is on /user/[uid]/edit page
  if ($form_id == 'user_form' || $form_id == 'user_register_form') {
    $current_user = _wind_get_current_login_user();
    $haystack = $current_user->getRoles();

    $needles = ['admin', 'administrator', 'company_admin', 'manager'];
    // Disable form field if user do NOT have the right role/s.
    if(count(array_intersect($haystack, $needles)) == 0){
      $form['user_picture']['#access'] = false;
      $form['field_team']['#access'] = false;
      $form['timezone']['#access'] = false;
      $form['language']['#access'] = false;
    }

    if(count(array_intersect($haystack, ['admin', 'administrator'])) == 0){
      unset($form['account']['roles']['#options']['admin']);
      unset($form['account']['roles']['#options']['administrator']);
      unset($form['account']['roles']['#options']['company_admin']);
    }

    if(count(array_intersect($haystack, ['admin', 'administrator', 'company_admin'])) == 0){
      unset($form['account']['roles']['#options']['company_admin']);
    }

  }
}

function _wind_lms_cleanup_package_files($originalFids, $fids){
  // Todo: Housekeeping for deleted course node or removal of package.
}

function wind_lms_create_group_learning_path($title) {
  $group = \Drupal\group\Entity\Group::create([
      'type' => 'learning_path',
      'label' => $title,
    ]
  );
  $group->enforceIsNew();
  $group->save();

  return $group;
}

function wind_lms_get_all_user_in_group($gid) {
  $users  = array();
  $result = \Drupal::entityQuery('group_content')
    ->condition('gid', $gid)
    ->execute();

  if ($result) {
    $relations = \Drupal\group\Entity\GroupContent::loadMultiple($result);
    foreach ($relations as $relation) {
      $entity = $relation->getEntity();
      if ($entity->getEntityTypeId() == 'user') {
        $users[$entity->id()] = $entity;
      }
    }
  }
  return $users;
}

/**
 * Get all of the groups the user belongs to.
 */
function wind_lms_get_all_user_groups($user) {
  $groups = array();
  $group_membership_service = \Drupal::service('group.membership_loader');
  $groupServices = $group_membership_service->loadByUser($user);
  foreach($groupServices as $groupService){
    $group = $groupService->getGroup();
    $groups[$group->id()] = $group;
  }
  return $groups;
}

function wind_lms_add_user_to_group($uid, $gid) {
  $account = \Drupal\user\Entity\User::load($uid);
  $group = \Drupal\group\Entity\Group::load($gid);
  $group->addContent($account, 'group_membership', array());
}

function wind_lms_create_module($name) {
  $entity = OpignoModule::create(array(
    'name' => $name,
    'status' => true,
  ));
  $entity->save();

  return $entity;
}

function wind_lms_createScormActivity($name, $fid){
  // Create activity.
  $activity = \Drupal\opigno_module\Entity\OpignoActivity::create([
    'type' => 'opigno_scorm',
    'name' => $name,
    'opigno_scorm_package' => [
      'target_id' => $fid,
    ],
  ]);

  $activity->save();
  return $activity;
}

/**
 * @param $filepath
 * @return \Drupal\Core\Entity\EntityInterface|\Drupal\file\Entity\File|\Drupal\file\FileInterface|false|null|void
 */
function wind_lms_setFileRecord($filepath){
  $parsed_url = UrlHelper::parse($filepath);
  $filepath = $parsed_url['path'];
  $contents = file_get_contents($filepath);
  $file_name = drupal_basename($filepath);
  // Prepare folder.
  $public_external_package_dir = 'public://external_packages';
  file_prepare_directory($public_external_package_dir, FILE_CREATE_DIRECTORY);
  $temporary_file_path = $public_external_package_dir . '/' . $file_name;
  /** @var \Drupal\file\FileInterface|false $file */
  $result = file_save_data($contents, $temporary_file_path);
  if (!$result) {
    return FALSE;
  }
  $file = \Drupal\file\Entity\File::load($result->id());
  return $file;
}

/**
 * @return \Drupal\group\Entity\Group[]
 */
function wind_lms_get_all_group_learning_path(){
  $collection = array();
  $groups = \Drupal\group\Entity\Group::loadMultiple();
  /**
   * Todo: Optimize - Convert to DB query.
   * @var  $gid
   * @var \Drupal\group\Entity\Group $group
   */
  foreach ($groups as $gid => $group) {
    if ($group->getGroupType()->label() == 'Learning Path') {
      $collection[$gid] = $group;
    }
  }
  return $collection;
}

function wind_lms_get_user_group_learning_paths($user) {
  $filtered_groups = [];
  $groupMembershipService = \Drupal::service('group.membership_loader');
  $groups = $groupMembershipService->loadByUser($user);
  /** @var \Drupal\group\GroupMembership $groupMembership */
  foreach ($groups as $groupMembership) {
    $group = $groupMembership->getGroup();
    if($group->getGroupType()->label() == 'Learning Path'){
      $filtered_groups[$group->id()] = $group;
    }
  }
  return $filtered_groups;
}

function wind_lms_get_group_ids($options = array()) {
  $query = \Drupal::entityQuery('group');
  foreach ($options as $key => $val) {
    $query->condition($key, $val);
  }
  $result = $query->execute();

  if ($result) {
    return $result;
  } else {
    return array();
  }
}

/**
 * @param $user
 * @param Group $group
 * @return \Drupal\group\Entity\GroupRole[]
 */
function wind_lms_get_user_group_roles($user, Group $group) {
  /** @var \Drupal\group\GroupMembership $membership */
  $membership = $group->getMember($user);
  if (!$membership) {
    return [];
  }
  return $membership->getRoles();
}

/**
 * @param $currentUser
 * @param $target_user
 * @param $exclude_group_type_label
 * @return \Drupal\group\GroupMembership[]
 */
function wind_lms_current_user_and_target_user_in_groups($currentUser, $target_user, $exclude_group_type_label) {
  $currentUserGroups = wind_lms_get_all_user_groups($currentUser);
  $currentUserSameGroups = [];
  foreach ($currentUserGroups as $currentUserGroup) {
    if($currentUserGroup->getGroupType()->label() == $exclude_group_type_label){
      continue;
    }
    $targetUserMembership = $currentUserGroup->getMember($target_user);
    if($targetUserMembership){
      $currentUserSameGroups[] = $currentUserGroup;
    }
  }
  return $currentUserSameGroups;
}

/**
 * Return array of course paid by the user
 * @param $user
 *
 * @return array
 */
function _wind_lms_get_user_all_assigned_course_data($user, $language = null){
  $test_courses = array();
  // get ?test=true in the URL
  $isTestActive = \Drupal::request()->get('test');
  // Add testing courses if user has permission and parameter test is true
  if($isTestActive == 'true'){
    $test_courses[] = [
      'title' => 'Test Course',
      'type' => 'course',
      'package_files' => array(
        [
          'type' => 'tincan',
          'course_data' => _wind_lms_course_add_tincan_course_data($user, 'test_abc123'),
          'activity_link' => _wind_lms_tincan_build_link_of_static_course('Test Course', 'test_course')
        ]
      ),
      'folder' => 'test_course',
      'tincan_course_id' => 'test_abc123'
    ];
    $test_courses[] = [
      'title' => 'Le Rouge',
      'type' => 'course',
      'package_files' => array(
        [
          'type' => 'tincan',
          'course_data' => _wind_lms_course_add_tincan_course_data($user, 'http://9qnQNtAlndQDKxBIjpu7htddOsClIEQh_rise'),
          'activity_link' => _wind_lms_tincan_build_link_of_static_course('Le Rouge', 'le-rouge-tincan-4SaXPWmj')
        ]
      ),
      'folder' =>  'le-rouge-tincan-4SaXPWmj',
      'tincan_course_id' => 'http://9qnQNtAlndQDKxBIjpu7htddOsClIEQh_rise'
    ];
  }

  // Get all of the course nid(s) assigned to $user
  $course_nids = _wind_lms_get_all_courses_by_user($user);

  $curriculums = [];
  $curriculum_nids = _wind_lms_get_all_curriculums_by_user($user);
  $curriculum_nodes = \Drupal\node\Entity\Node::loadMultiple($curriculum_nids);
  foreach ($curriculum_nodes as $nid => $curriculum_node) {
    // Get all of the courses in the curriculum
    $field_course = $curriculum_node->get('field_course')->getValue();
    $curriculum_course_nids = array_map(function($value){
      return $value['target_id'];
    }, $field_course);

    foreach ($curriculum_course_nids as $curriculum_course_nid) {
      $key = array_search($curriculum_course_nid, $course_nids);
      // If the course exists in both curriculum and standalone course
      if($key){
        // Remove duplicate
        unset($course_nids[$key]);
      }
    }

    $curriculums[$nid] = array(
      'title' => $curriculum_node->label(),
      'type' => 'curriculum',
      'nid' => $nid,
      'courses' => _wind_lms_load_course_packages($curriculum_course_nids, $user),
    );
  }
  // Load all of the nid(s) to get course data
  $courses = _wind_lms_load_course_packages($course_nids, $user);
  $all_activities =  array_merge($test_courses, $courses);
  return array_merge($all_activities, $curriculums);
}

function _wind_lms_get_all_curriculums_by_user($user) {
  $nids = _wind_lms_load_all_curriculum_assigned_to_user($user);
  // Combined with of course nid(s) that are available to everyone - "Accessible To All Leaners" field checked
  $nids = array_merge($nids, _wind_lms_load_all_curriculum_by_access_to_all_user());
  return $nids;
}

function _wind_lms_get_all_courses_by_user($user) {
  // Get all of the course nid(s) assigned to $user
  $scorm_course_nids = _wind_lms_load_all_courses_assigned_to_user_by_field_learner($user);
  // Combined with of course nid(s) that are available to everyone - "Accessible To All Leaners" field checked
  $scorm_course_nids = array_merge($scorm_course_nids, _wind_lms_load_all_courses_accessiable_to_user_by_field_learner_access());
  // Combined with of course nid(s) that are available to user's team  - "User Team" field checked
  $scorm_course_nids = array_merge($scorm_course_nids, _wind_lms_load_all_courses_accessible_to_user_by_field_user_team($user));
  return $scorm_course_nids;
}

function _wind_lms_load_course_packages($nids, $user){
  $nodes = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($nids);
  $courses = [];
  foreach ($nodes as $nid => $node){
    $field_package_file = $node->get('field_package_file')->getValue();
    // If there's no zip package attached to this node,
    // declare it as ILT (Instructor Lead Training)
    if (empty($field_package_file)) {
      $courses[] = [
        'title' => $node->label(),
        'type' => 'course',
        'nid' => $node->id(),
        'package_files' => [],
      ];
    } else {
      $courses[] = [
        'title' => $node->label(),
        'type' => 'course',
        'nid' => $node->id(),
        'package_files' => _wind_lms_get_course_package_definition($node, $user),
      ];
    }
  }

  return $courses;
}

function _wind_lms_get_course_package_definition(NodeInterface $node, $user) {
  $data = array();

  /* @var \Drupal\wind_tincan\WindTincanService $tincan_service */
  $tincan_service = \Drupal::service('wind_tincan.tincan');

  /** @var \Drupal\Core\Field\EntityReferenceFieldItemList $zipFiles */
  $zipFiles = $node->get('field_package_file');

  /** @var \Drupal\file\Entity\File $file */
  foreach ($zipFiles->referencedEntities() as $key => $file) {
    $scorm = _wind_scorm_load_by_fid($file->id());
    if ($scorm) {
      $title =  _wind_lms_get_scorm_package_title($scorm->id);
      $data[$key]['type'] = 'scorm';
      $data[$key]['title'] = $title;
      $data[$key]['file_name'] = $file->label();
      $data[$key]['scorm_package'] = $scorm;
      $data[$key]['activity_link'] = wind_scorm_get_lanuch_link_rendable_array($scorm->id, $title);
      $data[$key]['course_data'] = array(
        'progress' => _wind_lms_load_user_scorm_package_progress($file, $user->id()),
      );

    } else {
      $tincan = _wind_lms_tincan_load_by_fid($file->id());
      if ($tincan) {
        $tincan_uri = $tincan_service::getExtractPath($file);
        $title = $node->label();
        $path = file_url_transform_relative(file_create_url($tincan_uri)) . '/' . $tincan->launch_filename;
        $data[$key]['type'] = 'tincan';
        $data[$key]['title'] = str_replace('.zip', '', $file->label()); // Tincan XML doesn't contain any title. Resort to this for now.
        $data[$key]['file_name'] = $file->label();
        $data[$key]['tincan_package'] = $tincan;
        $data[$key]['activity_link'] = _wind_lms_tincan_build_course_link($title, $path, $tincan);
        $data[$key]['course_data'] = _wind_lms_course_add_tincan_course_data($user, $tincan->activity_id);
      }
    }
  }
  return $data;
}

function _wind_lms_get_user_course_progress($node, $uid){
  /** @var \Drupal\Core\Field\EntityReferenceFieldItemList $zipFiles */
  $zipFiles = $node->get('field_package_file');

  foreach ($zipFiles->referencedEntities() as $file) {
    return _wind_lms_load_user_scorm_package_progress($file, $uid);
  }
  return null;
}

/**
 * @return string
 */
function _wind_lms_get_scheme_and_http_host(){
  // Since we're using forward HTTP to HTTPS ($_SERVER[HTTP_X_FORWARDED_PROTO] = https),
  // \Drupal::request()->getSchemeAndHttpHost() will return http://... on www.xxx.com
  // We have to make sure the URL is HTTPS
  $schemaAndHost = \Drupal::request()->getSchemeAndHttpHost();
  return $schemaAndHost;
}

/**
 * @return string
 */
function _wind_lms_get_user_full_name( \Drupal\user\Entity\User $user) {
  $firstName = $user->hasField('field_first_name') ? $user->get('field_first_name')->value : '';
  $lastName = $user->hasField('field_last_name') ? $user->get('field_last_name')->value : '';

  if (empty($firstName) && empty($lastName)) {
    return $user->get('name')->value;
  }

  return $firstName . ' ' . $lastName;
}

function _wind_lms_encode_certificate_id($courseData) {
  // Create an Id that can be decoded to lookup.
  // CN = Course Node
  $code_ids = ['CN' . $courseData['nid'] ];
  foreach ($courseData['package_files'] as $package_file) {

    if($package_file['type'] == 'scorm'){
      // SM = SCORM
      $code_ids[] = 'SM' . $package_file['scorm_package']->id;
    }

    if($package_file['type'] == 'tincan'){
      // TC = Tincan
      $code_ids[] = 'TC' .  $package_file['course_data']['statement']->get('statement_id')->value;
    }
  }

  // Separate each structure with 00.
  return implode('AA', $code_ids);
}

function _wind_lms_decode_certificate_id($id) {
  $codes = explode('AA', $id);
  $nid = str_replace('CN', '', $codes[0]);
  $packageType = substr($codes[1], 0, 2)  == 'TC' ? 'tincan' : 'scorm';
  $packageDataId = substr($codes[1], 2);
  $completedRecord = [];

  if ($packageType == 'tincan') {
    $completedRecord = _wind_lms_get_tincan_completed_record_by_id($packageDataId);
  }

  if ($packageType == 'scorm') {
    $completedRecord = _wind_lms_get_scorm_completed_record_by_id($packageDataId);
  }

  return [
    'node_nid' => $nid,
    'data' => $codes,
    'type' => $packageType,
    'completedRecord' => $completedRecord
  ];
}

function _wind_scorm_get_ilt_launch_url($nid){
  return Url::fromRoute(
    'wind_scorm.scorm_launcher',
    array('id' => $nid),
    array(
      'query' => ['dest' =>  \Drupal::service('path.current')->getPath()],
      'attributes' => array(
        'class' => 'wind-scorm-popup-link',
        'data-coure-href' => '/node/' . $nid,
      )
    )
  );
}

function _wind_lms_get_ilt_lanuch_link_rendable_array( \Drupal\node\Entity\Node $node) {
  $url = _wind_scorm_get_ilt_launch_url($node->id());
  $linkContent = '<i class="fas fa-external-link-alt align-self-center pr-1"></i> ' . $node->label();
  $renderedAnchorContent = render($linkContent);
  return  [
    'rendable_element' => array(
      '#markup' => Link::fromTextAndUrl(Markup::create($renderedAnchorContent), $url)->toString(),
      '#attached' => array(
        'library' => array(
          'wind_scorm/course_popup'
        ),
      ),
    ),
    'url' => '/node/' . $node->id()
  ];
}

function _wind_lms_get_tincan_completed_record_by_id($statement_id) {
  $result = \Drupal::entityQuery('tincan_statement')
    ->condition('statement_id', $statement_id)
    ->execute();
  if (!$result) {

  }
  $statement = TincanStatement::load(_wind_lms_array_first_child_value($result));
  $jsonValue = $statement->get('json')->value;
  $json_array = Json::decode($jsonValue);
  return $json_array;
}

function _wind_lms_get_scorm_completed_record_by_id($id) {
  $package_result = \Drupal::database()->select('opigno_scorm_packages', 'o')
    ->fields('o', [])
    ->condition('id', $id)
    ->execute()
    ->fetchAll();
  if (empty($package_result)) {
    return [];
  }

  $result = \Drupal::database()->select('opigno_scorm_scorm_cmi_data', 'o')
    ->fields('o', [])
    ->condition('o.scorm_id', $id)
    ->execute()
    ->fetchAll();

  $records = array();
  foreach ($result as $record){
    if($record->cmi_key == 'cmi.completion_status'){
      $records[$record->uid]['cmi.completion_status'] = $record->value;
      return  $records;
    }
  }
  return $records;
}

function _wind_lms_array_first_child_value($arr) {
  $reverse = array_reverse($arr);
  return array_pop($reverse);
}
