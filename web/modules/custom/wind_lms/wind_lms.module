<?php

use Drupal\Component\Utility\UrlHelper;
use Drupal\Core\Render\Markup;
use Drupal\opigno_module\Entity\OpignoModule;
use Drupal\Core\Controller\ControllerBase;
use Drupal\group\Entity\Group;
use Drupal\opigno_group_manager\OpignoGroupContext;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\opigno_group_manager\Entity\OpignoGroupManagedContent;
use Drupal\opigno_module\Entity\OpignoActivity;
use Drupal\opigno_group_manager\OpignoGroupContentTypesManager;
use Drupal\Component\Serialization\Json;
use Drupal\node\NodeInterface;

//include_once('./inc/wind_lms.tincan.inc');
module_load_include('inc', 'wind_lms', 'inc/wind_lms.tincan');

/**
 * Implements hook_theme().
 * @param $exiting
 * @param $type
 * @param $theme
 * @param $path
 * @return array
 */
function wind_lms_theme($existing, $type, $theme, $path){
  return array(
    'wind_lms_dashboard' => array(
      'variables' => array('content' => NULL),
      'template' => 'wind-lms-dashboard'
    )
  );
}

/**
 * Implements hook_ENTITY_TYPE_insert() for node entities.
 *
 * This tests saving a node on node insert.
 *
 * @see \Drupal\node\Tests\NodeSaveTest::testNodeSaveOnInsert()
 */
function wind_lms_node_insert(NodeInterface $node) {
  // Set the node title to the node ID and save.
  if ($node->getType() != 'course') {
    return;
  }
  $field_package_file = $node->get('field_package_file')->getValue();
  if(empty($field_package_file)){
    return;
  }

  $fids = array_map(function($value){
    return $value['target_id'];
  }, $field_package_file);

  $files = \Drupal::entityTypeManager()->getStorage('file')->loadMultiple($fids);

  /* @var \Drupal\opigno_scorm\OpignoScorm $scorm_controller */
  $scorm_controller = \Drupal::service('opigno_scorm.scorm');

  foreach ($files as $file){
    // Create SCORM package from file.
    $result = $scorm_controller->scormExtract($file);
  }
}

/**
 * Implements hook_ENTITY_TYPE_update() for node entities.
 * @param \Drupal\node\NodeInterface $node
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function wind_lms_node_update(NodeInterface $node) {
  // Set the node title to the node ID and save.
  if ($node->getType() != 'course') {
    return;
  }

  /** @var  NodeInterface $originalNode */
  $originalNode = $node->original;
  $originalNodeField_package_file = $originalNode->get('field_package_file')->getValue();
  $originalFids = array_map(function($value){
    return $value['target_id'];
  }, $originalNodeField_package_file);

  $field_package_file = $node->get('field_package_file')->getValue();
  $fids = array_map(function($value){
    return $value['target_id'];
  }, $field_package_file);

  /* @var \Drupal\opigno_scorm\OpignoScorm $scorm_controller */
  $scorm_controller = \Drupal::service('opigno_scorm.scorm');

  if(!empty($fids)){
    $files = \Drupal::entityTypeManager()->getStorage('file')->loadMultiple($fids);

    foreach ($files as $file){
      $scorm = $scorm_controller->scormLoadByFileEntity($file);
      // If this scorm already extracted, skip it.
      if ($scorm) {
        continue;
      }

      // Create SCORM package from file.
      $result = $scorm_controller->scormExtract($file);
    }
  }

  // array_diff will return $originalFids values that are not in $fids.
  $diff = array_diff($originalFids, $fids);

  if (!empty($diff)) {
    foreach ($diff as $diff_file){
      // Todo: Remove file to save disc space.
    }
  }
}

function _wind_lms_cleanup_package_files($originalFids, $fids){
  // Todo: Housekeeping for deleted course node or removal of package.
}

function wind_lms_create_group_learning_path($title) {
  $group = \Drupal\group\Entity\Group::create([
      'type' => 'learning_path',
      'label' => $title,
    ]
  );
  $group->enforceIsNew();
  $group->save();

  return $group;
}

function wind_lms_get_all_user_in_group($gid) {
  $users  = array();
  $result = \Drupal::entityQuery('group_content')
    ->condition('gid', $gid)
    ->execute();

  if ($result) {
    $relations = \Drupal\group\Entity\GroupContent::loadMultiple($result);
    foreach ($relations as $relation) {
      $entity = $relation->getEntity();
      if ($entity->getEntityTypeId() == 'user') {
        $users[$entity->id()] = $entity;
      }
    }
  }
  return $users;
}

/**
 * Get all of the groups the user belongs to.
 */
function wind_lms_get_all_user_groups($user) {
  $groups = array();
  $group_membership_service = \Drupal::service('group.membership_loader');
  $groupServices = $group_membership_service->loadByUser($user);
  foreach($groupServices as $groupService){
    $group = $groupService->getGroup();
    $groups[$group->id()] = $group;
  }
  return $groups;
}

function wind_lms_add_user_to_group($uid, $gid) {
  $account = \Drupal\user\Entity\User::load($uid);
  $group = \Drupal\group\Entity\Group::load($gid);
  $group->addContent($account, 'group_membership', array());
}

function wind_lms_create_module($name) {
  $entity = OpignoModule::create(array(
    'name' => $name,
    'status' => true,
  ));
  $entity->save();

  return $entity;
}

function wind_lms_createScormActivity($name, $fid){
  // Create activity.
  $activity = \Drupal\opigno_module\Entity\OpignoActivity::create([
    'type' => 'opigno_scorm',
    'name' => $name,
    'opigno_scorm_package' => [
      'target_id' => $fid,
    ],
  ]);

  $activity->save();
  return $activity;
}

/**
 * @param $filepath
 * @return \Drupal\Core\Entity\EntityInterface|\Drupal\file\Entity\File|\Drupal\file\FileInterface|false|null|void
 */
function wind_lms_setFileRecord($filepath){
  $parsed_url = UrlHelper::parse($filepath);
  $filepath = $parsed_url['path'];
  $contents = file_get_contents($filepath);
  $file_name = drupal_basename($filepath);
  // Prepare folder.
  $public_external_package_dir = 'public://external_packages';
  file_prepare_directory($public_external_package_dir, FILE_CREATE_DIRECTORY);
  $temporary_file_path = $public_external_package_dir . '/' . $file_name;
  /** @var \Drupal\file\FileInterface|false $file */
  $result = file_save_data($contents, $temporary_file_path);
  if (!$result) {
    return FALSE;
  }
  $file = \Drupal\file\Entity\File::load($result->id());
  return $file;
}

/**
 * @return \Drupal\group\Entity\Group[]
 */
function wind_lms_get_all_group_learning_path(){
  $collection = array();
  $groups = \Drupal\group\Entity\Group::loadMultiple();
  /**
   * Todo: Optimize - Convert to DB query.
   * @var  $gid
   * @var \Drupal\group\Entity\Group $group
   */
  foreach ($groups as $gid => $group) {
    if ($group->getGroupType()->label() == 'Learning Path') {
      $collection[$gid] = $group;
    }
  }
  return $collection;
}

function wind_lms_get_user_group_learning_paths($user) {
  $filtered_groups = [];
  $groupMembershipService = \Drupal::service('group.membership_loader');
  $groups = $groupMembershipService->loadByUser($user);
  /** @var \Drupal\group\GroupMembership $groupMembership */
  foreach ($groups as $groupMembership) {
    $group = $groupMembership->getGroup();
    if($group->getGroupType()->label() == 'Learning Path'){
      $filtered_groups[$group->id()] = $group;
    }
  }
  return $filtered_groups;
}

function wind_lms_get_group_ids($options = array()) {
  $query = \Drupal::entityQuery('group');
  foreach ($options as $key => $val) {
    $query->condition($key, $val);
  }
  $result = $query->execute();

  if ($result) {
    return $result;
  } else {
    return array();
  }
}

/**
 * @param $user
 * @param Group $group
 * @return \Drupal\group\Entity\GroupRole[]
 */
function wind_lms_get_user_group_roles($user, Group $group) {
  /** @var \Drupal\group\GroupMembership $membership */
  $membership = $group->getMember($user);
  if (!$membership) {
    return [];
  }
  return $membership->getRoles();
}

/**
 * @param $currentUser
 * @param $target_user
 * @param $exclude_group_type_label
 * @return \Drupal\group\GroupMembership[]
 */
function wind_lms_current_user_and_target_user_in_groups($currentUser, $target_user, $exclude_group_type_label) {
  $currentUserGroups = wind_lms_get_all_user_groups($currentUser);
  $currentUserSameGroups = [];
  foreach ($currentUserGroups as $currentUserGroup) {
    if($currentUserGroup->getGroupType()->label() == $exclude_group_type_label){
      continue;
    }
    $targetUserMembership = $currentUserGroup->getMember($target_user);
    if($targetUserMembership){
      $currentUserSameGroups[] = $currentUserGroup;
    }
  }
  return $currentUserSameGroups;
}

/**
 * @param $user
 * Todo: Add missing courses
 * @return array
 */
function _wind_lms_course_get_all_courses_definition() {
  return [
//    "Test" => [
//      'title' => 'Test Course',
//      'folder' => 'course-tincan-hKLmLbMr',
//      'tincan_course_id' => 'http://course_2019_12_31',
//    ],
  ];
}

/**
 * Return array of course paid by the user
 * @param $user
 *
 * @return array
 */
function _wind_lms_get_user_all_assigned_course_data($user, $language = null){
  $courses = array();
  $avail_courses = _wind_lms_course_get_all_courses_definition();
  // get ?test=true in the URL
  $isTestActive = \Drupal::request()->get('test');
  // Add testing courses if user has permission and parameter test is true
  if($isTestActive == 'true'){
    $courses[] = ['title' => 'Test Course', 'type' => 'tincan', 'folder' => 'test_course', 'tincan_course_id' => 'test_abc123'];
    $courses[] = ['title' => 'Le Rouge', 'type' => 'tincan', 'folder' =>  'le-rouge-tincan-4SaXPWmj', 'tincan_course_id' => 'http://9qnQNtAlndQDKxBIjpu7htddOsClIEQh_rise'];
  }

  if ($language == 'es'){
    $courses[] = [
      'title' => 'Gobierno del Estado de Illinois: Curso de Capacitación para la Prevención del Acoso Sexual',
      'type' => 'tincan',
      'folder' =>  'gobierno-del-estado-de-illinois-curso-de-capacitacion-para-la-prevencion-del-acoso-sexual',
      'tincan_course_id' => 'http://Harassment Prevention Spanish'
    ];
  } else {
    $courses[] = [
      'title' => 'State of Illinois Sexual Harassment Prevention Training',
      'type' => 'tincan',
      'folder' =>  'state-of-illinois-sexual-harassment-prevention-training',
      'tincan_course_id' => 'http://Harassment Prevention English'
    ];
    $courses[] = [
      'title' => 'Employee Health and Wellness: Pandemic at Work',
      'type' => 'tincan',
      'folder' =>  'employee-health-and-wellness-pandemic-at-work-tincan-NaiQeBVx',
      'tincan_course_id' => 'http://tOf74Nvp4rNeR3OC3Xf27pbV_XDH-7Ew_rise',
    ];
  }

  // We have a problem if this is the case
  if (empty($courses)) {
    return [];
  }

  foreach ($courses as $index => &$course) {
    $progress = _wind_lms_course_add_tincan_course_data($user, $course['tincan_course_id']);
    $course += $progress;
    $course['activity_link'] = _wind_lsm_build_tincan_course_Link($course['title'], $course['folder']);
  }

  // Get all of the course nid(s) assigned to $user
  $scorm_course_nids = _wind_lms_get_all_courses_by_user($user);
  // Combined with of course nid(s) that are available to everyone - "Accessible To All Leaners" field checked
  $scorm_course_nids = array_merge($scorm_course_nids, _wind_lms_get_all_courses_by_access_to_all_user());
  // Load all of the nid(s) to get course data
  $scorm_courses = _wind_lms_load_all_courses($scorm_course_nids, $user);
  return array_merge($courses, $scorm_courses);
}

function _wind_lms_get_all_courses_by_user($user){
  // https://www.drupal.org/docs/drupal-apis/entity-api/working-with-the-entity-api
  $query = \Drupal::entityTypeManager()->getStorage('node')->getQuery();
  $query->condition('type', 'course');
  $query->condition('status', 1);
  $query->condition('field_learner', $user->id(), 'IN');
  $result = $query->execute();

  // If no result, return empty array.
  if (empty($result)) {
    return [];
  }
  return $result;
}

function _wind_lms_get_all_courses_by_access_to_all_user(){
  $query = \Drupal::entityTypeManager()->getStorage('node')->getQuery();
  $query->condition('type', 'course');
  $query->condition('status', 1);
  $query->condition('field_learner_access', '1');
  $result = $query->execute();

  // If no result, return empty array.
  if (empty($result)) {
    return [];
  }
  return $result;
}

function _wind_lms_load_all_courses($nids, $user){
  $nodes = \Drupal::entityTypeManager()->getStorage('node')->loadMultiple($nids);
  $courses = [];
  foreach ($nodes as $nid => $node){
    $field_package_file = $node->get('field_package_file')->getValue();
    // If there's no zip package attached to this node, skip it - nothing to launch.
    if (empty($field_package_file)) {
      continue;
    }

    $courses[] = [
      'title' => $node->label(),
      'type' => 'scorm',
      'nid' => $node->id(),
      'progress' => _wind_lms_get_user_course_progress($node, $user->id()),
      'package_files' => _wind_lms_get_course_scorm_packages($node, $user->id()),
    ];
  }

  return $courses;
}

/**
 * @param \Drupal\node\NodeInterface $node
 * @param $uid
 *
 * @return array
 */
function _wind_lms_get_course_scorm_packages(NodeInterface $node, $uid) {
  $data = array();
  /** @var \Drupal\Core\Field\EntityReferenceFieldItemList $zipFiles */
  $zipFiles = $node->get('field_package_file');
  /** @var \Drupal\file\Entity\File $file */
  foreach ($zipFiles->referencedEntities() as $key => $file) {
    $scorm = _wind_scorm_load_by_fid($file->id());
    // todo: why it failed to find the file.
    if (!$scorm) {
      continue;
    }
    $title =  _wind_lms_get_scorm_package_title($scorm->id);
    $data[$key] = array(
      'title' => $title,
      'file_name' => $file->label(),
      'scorm_package' => $scorm,
      'activity_link' => wind_scorm_get_lanuch_link_renable_array($scorm->id, $title),
      'progress' => _wind_lms_get_user_scorm_package_progress($file, $uid),
    );
  }

  return $data;
}

function _wind_lms_get_scorm_package_title($scorm_id) {
  $db = \Drupal::database();

  $data = NULL;
  $sco = $db->select('opigno_scorm_package_scos', 'o')
    ->fields('o', [])
    ->condition('o.scorm_id', $scorm_id)
    ->execute()
    ->fetchObject();

  if ($sco) {
    return $sco->title;
  }

  return '';
}

function _wind_lms_get_user_course_progress($node, $uid){
  /** @var \Drupal\Core\Field\EntityReferenceFieldItemList $zipFiles */
  $zipFiles = $node->get('field_package_file');

  foreach ($zipFiles->referencedEntities() as $file) {
    return _wind_lms_get_user_scorm_package_progress($file, $uid);
  }
  return null;
}

function _wind_lms_get_user_scorm_package_progress($file, $uid) {
  $db = \Drupal::database();
  /** @var \Drupal\opigno_scorm\OpignoScorm $scorm_controller */
  $scorm_controller = \Drupal::service('opigno_scorm.scorm');
  $scorm = $scorm_controller->scormLoadByFileEntity($file);
  if(!$scorm){
    return 'Unable to process SCORM package';
  }
  $data = NULL;
  $result = $db->select('opigno_scorm_scorm_cmi_data', 'o')
    ->fields('o', array('value', 'serialized'))
    ->condition('o.uid', $uid)
    ->condition('o.scorm_id', $scorm->id)
    ->condition('o.cmi_key', 'cmi.completion_status')
    ->execute()
    ->fetchObject();

  if (isset($result->value)) {
    $data = !empty($result->serialized) ? unserialize($result->value) : $result->value;
    return $data;
  }

  return null;
}

function _wind_scorm_load_by_fid($fid){
//  $db = \Drupal\Core\Database\Database::getConnection();
  $db = \Drupal::database();
  $query = $db->select('opigno_scorm_packages', 'o');
  $query->fields('o', []);
  $query->condition('fid', $fid);
  return $query->execute()->fetchObject();
}

function _wind_lsm_build_tincan_course_Link($title, $course_folder) {
  $linkContent = '<i class="fas fa-external-link-alt align-self-center pr-1"></i> ' . "<span> {$title}</span>";
  $renderedAnchorContent = render($linkContent);
  $url = Url::fromUserInput(
    '/course/' . $course_folder,
    [
      'attributes' => [
        'data-coure-href' => _wind_lms_gen_course_link($course_folder),
        'class' => array('wind-scorm-popup-link', 'd-flex')
      ]
    ]
  );
  return Link::fromTextAndUrl(Markup::create($renderedAnchorContent), $url)->toString();
}

/**
 * @param $course_folder
 *
 * @return string
 */
function _wind_lms_gen_course_link($course_folder) {
  $currentUser = \Drupal::currentUser();
  $schemaAndHost = _wind_lms_get_scheme_and_http_host();

  //Ex: {"name":["quan ngo"],"account":[{"accountServiceHomePage":"http://cloud.scorm.com","accountName":"0QTP625WM3|quan.ngo@windwalker.com"}],"objectType":"Agent"}
  $actor = [
    'name' => array($currentUser->getAccountName()),
    'account' => array(
      array(
        "accountName" => _wind_lms_get_user_tincan_agent_account_name($currentUser),
        'accountServiceHomePage' => $schemaAndHost . '/user/' . $currentUser->id(),
      )
    ),
    'objectType' => 'Agent'
  ];
  $actorJson = Json::encode($actor);
  $module_handler = \Drupal::service('module_handler');
  $module_path = $module_handler->getModule('wind_lms')->getPath();
  $link = $module_path . '/course/' . $course_folder . '?';
  $link .= 'endpoint=' . $schemaAndHost . '/course/tcapi';
  $link .= '&actor=' . urlencode($actorJson);
  return $link;
}

/**
 * @return string
 */
function _wind_lms_get_scheme_and_http_host(){
  // Since we're using forward HTTP to HTTPS ($_SERVER[HTTP_X_FORWARDED_PROTO] = https),
  // \Drupal::request()->getSchemeAndHttpHost() will return http://... on www.xxx.com
  // We have to make sure the URL is HTTPS
  $schemaAndHost = \Drupal::request()->getSchemeAndHttpHost();
  return $schemaAndHost;
}
