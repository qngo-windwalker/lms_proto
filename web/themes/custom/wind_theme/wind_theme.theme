<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\file\Entity\File;
use Drupal\Component\Utility\Xss;

/**
 * Implements hook_theme_suggestions_alter().
 */
function wind_theme_theme_suggestions_alter(&$suggestions, $variables, $hook) {
  if ($hook == 'page') {

    // Node type.
    $node = \Drupal::routeMatch()->getParameter('node');
    if ($node) {
      $suggestions[] = 'page__node__' . $node->type->target_id;
    }

    // Anonymous/logged frontpages.
    if (\Drupal::service('path.matcher')->isFrontPage() && \Drupal::currentUser()->isAnonymous()) {
      $suggestions[] = 'page__front__not_logged_in';
    }
    elseif (\Drupal::service('path.matcher')->isFrontPage() && !\Drupal::currentUser()->isAnonymous()) {
      $suggestions[] = 'page__front__logged_in';
    }

    // Admin.
//    $route = \Drupal::routeMatch()->getRouteObject();
//    $is_admin = FALSE;
//    if (!empty($route)) {
//      $is_admin_route = \Drupal::service('router.admin_context')->isAdminRoute($route);
//      $has_node_operation_option = $route->getOption('_node_operation_route');
//      $is_admin = ($is_admin_route || $has_node_operation_option);
//    }
//    else {
//      $current_path = \Drupal::service('path.current')->getPath();
//      if (preg_match('/node\/(\d+)\/edit/', $current_path, $matches)) {
//        $is_admin = TRUE;
//      }
//      elseif (preg_match('/taxonomy\/term\/(\d+)\/edit/', $current_path, $matches)) {
//        $is_admin = TRUE;
//      }
//    }
//
//    if ($is_admin) {
//      $suggestions[] = 'page__admin';
//    }

    $suggestions = array_unique($suggestions);
  }
}

/**
 * Implements hook_preprocess_html().
 */
function wind_theme_preprocess_html(&$variables){
  try {
    $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  } catch (Exception $e) {
    $variables['is_front'] = false;
  }

  // If we're on the front page.
  if (!$variables['is_front']) {
    $variables['attributes']['class'][] = 'page-not-front';
    // Add unique classes for each page and website section.
    $path = \Drupal::service('path.current')->getPath();
    $alias = \Drupal::service('path_alias.manager')->getAliasByPath($path);
    $alias = trim($alias, '/');
    if (!empty($alias)) {
      $name = str_replace('/', '-', $alias);
      $variables['attributes']['class'][] = 'page-' . $name;
      [$section, ] = explode('/', $alias, 2);
      if (!empty($section)) {
        $variables['attributes']['class'][] = 'path-' . $section;
      }
    }
  } else {
    $variables['attributes']['class'][] = 'page-front';
  }

  if (\Drupal::currentUser()->isAnonymous()) {
    $variables['attributes']['class'][] = 'user-not-logged-in';
  } else {
    $variables['attributes']['class'][] = 'user-logged-in';
  }

  $routeName = \Drupal::routeMatch()->getRouteName();
  // Add class name to body element using route name in [module].routing.yml
  $variables['attributes']['class'][] = 'route-' . str_replace('.', '-', $routeName);

  if (isset($variables['node_type']) && $variables['node_type']) {
    $variables['attributes']['class'][] = 'page-node-' . $variables['node_type'];
  } elseif ($routeName == 'opigno_learning_path.manager.index') {
    $variables['attributes']['class'][] = 'page-node-learning_path';
  }

  if ($routeName == 'opigno_module.manager.get_item_form'
    || $routeName == 'opigno_group_manager.manager.get_item_form'
  ) {
    $variables['attributes']['class'][] = 'lp-iframe';
  }

  $wind_theme_use_default_body_background = theme_get_setting('wind_theme_use_default_body_background');
  // For custom background instead of the default
  if (!$wind_theme_use_default_body_background) {
    $wind_theme_body_image_path = Xss::filter(theme_get_setting('wind_theme_body_image_path'));
    if($wind_theme_body_image_path){
      $background_image_uri = 'public://' . $wind_theme_body_image_path;
      $background_image_url = file_create_url($background_image_uri);
      $variables['attributes']['style'][] = "background-image: url({$background_image_url});";
    }

    $wind_theme_body_css_styles =  Xss::filterAdmin(theme_get_setting('wind_theme_body_css_styles'));
    if($wind_theme_body_css_styles){
      $variables['attributes']['style'][] = $wind_theme_body_css_styles;
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function wind_theme_preprocess_page(&$variables){

  $route = \Drupal::routeMatch()->getRouteName();
  $account = \Drupal::currentUser();
  $variables['route_name'] = $route;

  /** Login form */
  $variables['login_form'] = null;
  if (!$account->id()) {
    $form = Drupal::formBuilder()->getForm(Drupal\user\Form\UserLoginForm::class);
    $render = Drupal::service('renderer');

    $form['name']['#attributes']['placeholder'] = $form['name']['#title'];
    $form['pass']['#attributes']['placeholder'] = $form['pass']['#title'];
    $form['name']['#title'] = $form['name']['#description'] = null;
    $form['pass']['#title'] = $form['pass']['#description'] = null;
    $form['actions']['submit']['#attributes']['class'] = ['btn', 'btn-primary'];
    $variables['login_form'] = $render->renderPlain($form);
  }

  /** Password form */
  $variables['password_form'] = null;
  if (!$account->id()) {
    $form = Drupal::formBuilder()->getForm(Drupal\user\Form\UserPasswordForm::class);
    $render = Drupal::service('renderer');

    $form['name']['#attributes']['placeholder'] = $form['name']['#title'];
    $form['name']['#title'] = $form['name']['#description'] = null;
    $form['mail']['#access'] = false;
    $variables['password_form'] = $render->renderPlain($form);
  }

  /** Password form */
  $variables['register_form'] = null;
  if (!$account->id()) {
    $entity = \Drupal::entityTypeManager()
      ->getStorage('user')
      ->create(array());

    $formObject = \Drupal::entityTypeManager()
      ->getFormObject('user', 'register')
      ->setEntity($entity);

    $form = \Drupal::formBuilder()->getForm($formObject);

    $form['account']['mail']['#attributes']['placeholder'] = $form['account']['mail']['#title'];
    $form['account']['name']['#attributes']['placeholder'] = $form['account']['name']['#title'];
    $form['account']['mail']['#title'] = null;
    $form['account']['name']['#title'] = null;
    $form['user_picture']['#access'] = false;
    $form['contact']['#access'] = false;
    $form['timezone']['#access'] = false;
    $variables['register_form'] = $form;
  }

  /** Search form */
//  $variables['search_form'] = null;
//  $form = Drupal::formBuilder()->getForm(Drupal\search\Form\SearchBlockForm::class);
//  $render = Drupal::service('renderer');
//  $form['keys']['#attributes']['placeholder'] = $form['keys']['#title'];
//  $form['keys']['#title'] = null;
//  $variables['search_form'] = $render->renderPlain($form);

  /** Header user picture */
//  if (!$account->isAnonymous()) {
//    $user = \Drupal\user\Entity\User::load($account->id());
//    $user_picture = $user->get('user_picture')->getValue();
//    if (isset($user_picture[0]['target_id'])) {
//      $user_picture = \Drupal\file\Entity\File::load($user_picture[0]['target_id']);
//      $variables['user_picture'] = file_create_url($user_picture->getFileUri());
//    }
//  }

//  $variables['page']['content'] = [
//    '#theme' => 'wind_theme__login_front',
//  ];
}

/**
 * Implements hook_form_system_theme_settings_alter().
 *
 * Form override for theme settings.
 */
function wind_theme_form_system_theme_settings_alter(&$form, FormStateInterface &$form_state, $form_id = NULL) {
  // Work-around for a core bug affecting admin themes. See issue #943212.
  if (isset($form_id)) {
    return;
  }

  $moduleHandler = \Drupal::service('module_handler');
  // Backgroung settings, only available when file.module is enabled.
  if (!$moduleHandler->moduleExists('file')) {
    return;
  }

  $form['wind_theme_body_settings'] = [
    '#type' => 'details',
    '#title' => t('Body background'),
    '#open' => TRUE,
  ];

  $form['wind_theme_body_settings']['wind_theme_use_default_body_background'] = [
    '#type' => 'checkbox',
    '#title' => t('Use the background supplied by the theme'),
    '#description' => t('Uncheck here if you want the theme to use a custom image for the body background.'),
    '#default_value' => theme_get_setting('wind_theme_use_default_body_background'),
  ];

  $form['wind_theme_body_settings']['image'] = [
    '#type' => 'container',
    '#states' => [
      'invisible' => [
        'input[name="wind_theme_use_default_body_background"]' => ['checked' => TRUE],
      ],
    ],
  ];

  $form['wind_theme_body_settings']['image']['wind_theme_body_image_path'] = [
    '#type' => 'textfield',
    '#title' => t('The path to the body background image'),
    '#description' => t('The path to the image file you would like to use as your custom body background (relative to sites/default/files). The suggested size for the body background is 3000x934.'),
    '#default_value' => theme_get_setting('wind_theme_body_image_path'),
  ];

  $form['wind_theme_body_settings']['image']['wind_theme_body_image_upload'] = [
    '#type' => 'file',
    '#title' => t('Upload an image'),
    '#description' => t("If you don't have direct file access to the server, use this field to upload your body background image."),
    '#upload_location' => 'public://',
    '#upload_validators' => [
      'file_validate_is_image' => ['gif png jpg jpeg'],
    ],
  ];

  $form['wind_theme_body_settings']['css'] = [
    '#type' => 'container',
    '#states' => [
      'invisible' => [
        'input[name="wind_theme_use_default_body_background"]' => ['checked' => TRUE],
      ],
    ],
  ];

  $form['wind_theme_body_settings']['css']['wind_theme_body_css_styles'] = [
    '#type' => 'textfield',
    '#title' => t('Body CSS styles'),
    '#description' => t("Custom CSS styles you would like to apply to the body. Example: background-repeat: no-repeat;  background-position: center;"),
    '#default_value' => theme_get_setting('wind_theme_body_css_styles'),
    '#attributes' => array('style' => ['width: 100%;'])
  ];

  // Validate and submit.
  $form['#validate'][] = 'wind_theme_form_system_theme_settings_alter_validate';
  $form['#submit'][] = 'wind_theme_form_system_theme_settings_alter_submit';

  $form_state->setCached(FALSE);
}

/**
 * Validation callback for wind_theme_form_system_theme_settings_alter().
 */
function wind_theme_form_system_theme_settings_alter_validate($form, FormStateInterface &$form_state) {
  if (in_array('file_managed_file_submit', $form_state->getSubmitHandlers())) {
    return;
  }

  $new_storage = [];

  if( $form_state->getValue('wind_theme_body_image_upload') ){
    $file = _file_save_upload_from_form($form['wind_theme_body_settings']['image']['wind_theme_body_image_upload'], $form_state, 0);
    if ($file) {
      $file->setPermanent();
      $file->save();
      $file_usage = \Drupal::service('file.usage');
      $file_usage->add($file, 'wind_theme', 'user', \Drupal::currentUser()->id());
      $new_storage['wind_theme_body_image_path'] = $file;
      // Put the temporary file in form_values so we can save it on submit.
    } else {
      $form_state->setErrorByName('wind_theme_body_image_upload', t("Couldn't upload file."));
    }
  }

  // When intending to use the default background, unset the wind_theme_body_image_path.
  if ($form_state->getValue('wind_theme_use_default_body_background')) {
    $form_state->unsetValue('wind_theme_body_image_path');
  }

  $form_state->setStorage($new_storage);
}

/**
 * Submission callback for wind_theme_form_system_theme_settings_alter().
 */
function wind_theme_form_system_theme_settings_alter_submit($form, &$form_state) {
  $storage = $form_state->getStorage();

  if (isset($storage['wind_theme_body_image_path']) && $storage['wind_theme_body_image_path']) {
    $file = $storage['wind_theme_body_image_path'];
    $form_state->setValue('wind_theme_body_image_path', str_replace('public://', '', $file->getFileUri()));
  }
}
